$date
	Wed May 19 21:34:38 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module BUF $end
$var wire 1 ! A $end
$var wire 1 " Y $end
$upscope $end
$scope module DFFSR $end
$var wire 1 # C $end
$var wire 1 $ D $end
$var wire 1 % R $end
$var wire 1 & S $end
$var reg 1 ' Q $end
$upscope $end
$scope module Mux2x1_4b_synth_1 $end
$var wire 1 ( clk $end
$var wire 4 ) dataIn0 [3:0] $end
$var wire 4 * dataIn1 [3:0] $end
$var wire 1 + reset $end
$var wire 1 , selector $end
$var wire 1 - validIN0 $end
$var wire 1 . validIN1 $end
$var wire 1 / validOUT $end
$var wire 4 0 dataOutCond [3:0] $end
$scope module mux1 $end
$var wire 1 ( clk $end
$var wire 2 1 dataIn0 [1:0] $end
$var wire 2 2 dataIn1 [1:0] $end
$var wire 1 + reset $end
$var wire 1 , selector $end
$var wire 1 - validIN0 $end
$var wire 1 . validIN1 $end
$var reg 2 3 dataOutCond [1:0] $end
$var reg 2 4 out [1:0] $end
$var reg 1 5 validOUT $end
$var reg 1 6 validOutMux $end
$upscope $end
$scope module mux2 $end
$var wire 1 ( clk $end
$var wire 2 7 dataIn0 [1:0] $end
$var wire 2 8 dataIn1 [1:0] $end
$var wire 1 + reset $end
$var wire 1 , selector $end
$var wire 1 - validIN0 $end
$var wire 1 . validIN1 $end
$var reg 2 9 dataOutCond [1:0] $end
$var reg 2 : out [1:0] $end
$var reg 1 ; validOUT $end
$var reg 1 < validOutMux $end
$upscope $end
$upscope $end
$scope module Mux2x1_synth_1 $end
$var wire 1 = _01_ $end
$var wire 1 > _34_ $end
$var wire 1 ? _35_ $end
$var wire 1 @ _36_ $end
$var wire 1 A _37_ $end
$var wire 1 B _38_ $end
$var wire 1 C clk $end
$var wire 2 D dataIn0 [1:0] $end
$var wire 2 E dataIn1 [1:0] $end
$var wire 1 F reset $end
$var wire 1 G selector $end
$var wire 1 H validIN0 $end
$var wire 1 I validIN1 $end
$var wire 1 J validOUT $end
$var wire 2 K dataOutCond [1:0] $end
$var wire 1 L _33_ $end
$var wire 1 M _32_ $end
$var wire 1 N _31_ $end
$var wire 1 O _30_ $end
$var wire 1 P _29_ $end
$var wire 1 Q _28_ $end
$var wire 1 R _27_ $end
$var wire 1 S _26_ $end
$var wire 1 T _25_ $end
$var wire 1 U _24_ $end
$var wire 1 V _23_ $end
$var wire 1 W _22_ $end
$var wire 1 X _21_ $end
$var wire 1 Y _20_ $end
$var wire 1 Z _19_ $end
$var wire 1 [ _18_ $end
$var wire 1 \ _17_ $end
$var wire 1 ] _16_ $end
$var wire 1 ^ _15_ $end
$var wire 1 _ _14_ $end
$var wire 1 ` _13_ $end
$var wire 1 a _12_ $end
$var wire 1 b _11_ $end
$var wire 1 c _10_ $end
$var wire 1 d _09_ $end
$var wire 1 e _08_ $end
$var wire 1 f _07_ $end
$var wire 1 g _06_ $end
$var wire 1 h _05_ $end
$var wire 1 i _04_ $end
$var wire 1 j _03_ $end
$var wire 1 k _02_ $end
$var wire 2 l _00_ [1:0] $end
$scope module _40_ $end
$var wire 1 d A $end
$var wire 1 b Y $end
$upscope $end
$scope module _41_ $end
$var wire 1 c A $end
$var wire 1 a Y $end
$upscope $end
$scope module _42_ $end
$var wire 1 @ A $end
$var wire 1 ` Y $end
$upscope $end
$scope module _43_ $end
$var wire 1 ? A $end
$var wire 1 _ Y $end
$upscope $end
$scope module _44_ $end
$var wire 1 A A $end
$var wire 1 ? B $end
$var wire 1 ^ Y $end
$upscope $end
$scope module _45_ $end
$var wire 1 ^ A $end
$var wire 1 ] Y $end
$upscope $end
$scope module _46_ $end
$var wire 1 ` A $end
$var wire 1 ? B $end
$var wire 1 \ Y $end
$upscope $end
$scope module _47_ $end
$var wire 1 ] A $end
$var wire 1 \ B $end
$var wire 1 [ Y $end
$upscope $end
$scope module _48_ $end
$var wire 1 _ A $end
$var wire 1 h B $end
$var wire 1 Z Y $end
$upscope $end
$scope module _49_ $end
$var wire 1 ? A $end
$var wire 1 f B $end
$var wire 1 Y Y $end
$upscope $end
$scope module _50_ $end
$var wire 1 Z A $end
$var wire 1 Y B $end
$var wire 1 X Y $end
$upscope $end
$scope module _51_ $end
$var wire 1 [ A $end
$var wire 1 X B $end
$var wire 1 W Y $end
$upscope $end
$scope module _52_ $end
$var wire 1 b A $end
$var wire 1 [ B $end
$var wire 1 V Y $end
$upscope $end
$scope module _53_ $end
$var wire 1 > A $end
$var wire 1 V B $end
$var wire 1 U Y $end
$upscope $end
$scope module _54_ $end
$var wire 1 W A $end
$var wire 1 U B $end
$var wire 1 k Y $end
$upscope $end
$scope module _55_ $end
$var wire 1 _ A $end
$var wire 1 g B $end
$var wire 1 T Y $end
$upscope $end
$scope module _56_ $end
$var wire 1 ? A $end
$var wire 1 e B $end
$var wire 1 S Y $end
$upscope $end
$scope module _57_ $end
$var wire 1 T A $end
$var wire 1 S B $end
$var wire 1 R Y $end
$upscope $end
$scope module _58_ $end
$var wire 1 [ A $end
$var wire 1 R B $end
$var wire 1 Q Y $end
$upscope $end
$scope module _59_ $end
$var wire 1 a A $end
$var wire 1 [ B $end
$var wire 1 P Y $end
$upscope $end
$scope module _60_ $end
$var wire 1 > A $end
$var wire 1 P B $end
$var wire 1 O Y $end
$upscope $end
$scope module _61_ $end
$var wire 1 Q A $end
$var wire 1 O B $end
$var wire 1 j Y $end
$upscope $end
$scope module _62_ $end
$var wire 1 > A $end
$var wire 1 B B $end
$var wire 1 N Y $end
$upscope $end
$scope module _63_ $end
$var wire 1 > A $end
$var wire 1 [ B $end
$var wire 1 M Y $end
$upscope $end
$scope module _64_ $end
$var wire 1 M A $end
$var wire 1 L Y $end
$upscope $end
$scope module _65_ $end
$var wire 1 N A $end
$var wire 1 L B $end
$var wire 1 i Y $end
$upscope $end
$scope module _66_ $end
$var wire 1 C C $end
$var wire 1 m D $end
$var reg 1 n Q $end
$upscope $end
$scope module _67_ $end
$var wire 1 C C $end
$var wire 1 o D $end
$var reg 1 p Q $end
$upscope $end
$scope module _68_ $end
$var wire 1 C C $end
$var wire 1 = D $end
$var reg 1 J Q $end
$upscope $end
$upscope $end
$scope module bancoPrueba $end
$var wire 1 q validOUT $end
$var wire 1 r validIN3 $end
$var wire 1 s validIN2 $end
$var wire 1 t validIN1 $end
$var wire 1 u validIN0 $end
$var wire 1 v selector1 $end
$var wire 1 w selector0 $end
$var wire 1 x reset $end
$var wire 4 y dataOutSynth [3:0] $end
$var wire 4 z dataOutCond [3:0] $end
$var wire 4 { dataIn3 [3:0] $end
$var wire 4 | dataIn2 [3:0] $end
$var wire 4 } dataIn1 [3:0] $end
$var wire 4 ~ dataIn0 [3:0] $end
$var wire 1 !" clk $end
$scope module muxCond $end
$var wire 1 q validOUT $end
$var wire 1 "" validOutMux1 $end
$var wire 1 #" validOutMux2 $end
$var wire 1 r validIN3 $end
$var wire 1 s validIN2 $end
$var wire 1 t validIN1 $end
$var wire 1 u validIN0 $end
$var wire 1 v selector1 $end
$var wire 1 w selector0 $end
$var wire 1 x reset $end
$var wire 4 $" dataOutMux2 [3:0] $end
$var wire 4 %" dataOutMux1 [3:0] $end
$var wire 4 &" dataOutCond [3:0] $end
$var wire 4 '" dataIn3 [3:0] $end
$var wire 4 (" dataIn2 [3:0] $end
$var wire 4 )" dataIn1 [3:0] $end
$var wire 4 *" dataIn0 [3:0] $end
$var wire 1 !" clk $end
$scope module mux1 $end
$var wire 1 "" validOUT $end
$var wire 1 t validIN1 $end
$var wire 1 u validIN0 $end
$var wire 1 w selector $end
$var wire 1 x reset $end
$var wire 4 +" dataOutCond [3:0] $end
$var wire 4 ," dataIn1 [3:0] $end
$var wire 4 -" dataIn0 [3:0] $end
$var wire 1 !" clk $end
$scope module mux1 $end
$var wire 2 ." dataIn0 [1:0] $end
$var wire 2 /" dataIn1 [1:0] $end
$var wire 1 t validIN1 $end
$var wire 1 u validIN0 $end
$var wire 1 w selector $end
$var wire 1 x reset $end
$var wire 1 !" clk $end
$var reg 2 0" dataOutCond [1:0] $end
$var reg 2 1" out [1:0] $end
$var reg 1 2" validOUT $end
$var reg 1 3" validOutMux $end
$upscope $end
$scope module mux2 $end
$var wire 2 4" dataIn0 [1:0] $end
$var wire 2 5" dataIn1 [1:0] $end
$var wire 1 t validIN1 $end
$var wire 1 u validIN0 $end
$var wire 1 w selector $end
$var wire 1 x reset $end
$var wire 1 !" clk $end
$var reg 2 6" dataOutCond [1:0] $end
$var reg 2 7" out [1:0] $end
$var reg 1 8" validOUT $end
$var reg 1 9" validOutMux $end
$upscope $end
$upscope $end
$scope module mux2 $end
$var wire 1 #" validOUT $end
$var wire 1 r validIN1 $end
$var wire 1 s validIN0 $end
$var wire 1 w selector $end
$var wire 1 x reset $end
$var wire 4 :" dataOutCond [3:0] $end
$var wire 4 ;" dataIn1 [3:0] $end
$var wire 4 <" dataIn0 [3:0] $end
$var wire 1 !" clk $end
$scope module mux1 $end
$var wire 2 =" dataIn0 [1:0] $end
$var wire 2 >" dataIn1 [1:0] $end
$var wire 1 r validIN1 $end
$var wire 1 s validIN0 $end
$var wire 1 w selector $end
$var wire 1 x reset $end
$var wire 1 !" clk $end
$var reg 2 ?" dataOutCond [1:0] $end
$var reg 2 @" out [1:0] $end
$var reg 1 A" validOUT $end
$var reg 1 B" validOutMux $end
$upscope $end
$scope module mux2 $end
$var wire 2 C" dataIn0 [1:0] $end
$var wire 2 D" dataIn1 [1:0] $end
$var wire 1 r validIN1 $end
$var wire 1 s validIN0 $end
$var wire 1 w selector $end
$var wire 1 x reset $end
$var wire 1 !" clk $end
$var reg 2 E" dataOutCond [1:0] $end
$var reg 2 F" out [1:0] $end
$var reg 1 G" validOUT $end
$var reg 1 H" validOutMux $end
$upscope $end
$upscope $end
$scope module mux3 $end
$var wire 4 I" dataIn0 [3:0] $end
$var wire 4 J" dataIn1 [3:0] $end
$var wire 1 "" validIN0 $end
$var wire 1 #" validIN1 $end
$var wire 1 q validOUT $end
$var wire 1 v selector $end
$var wire 1 x reset $end
$var wire 4 K" dataOutCond [3:0] $end
$var wire 1 !" clk $end
$scope module mux1 $end
$var wire 2 L" dataIn0 [1:0] $end
$var wire 2 M" dataIn1 [1:0] $end
$var wire 1 "" validIN0 $end
$var wire 1 #" validIN1 $end
$var wire 1 v selector $end
$var wire 1 x reset $end
$var wire 1 !" clk $end
$var reg 2 N" dataOutCond [1:0] $end
$var reg 2 O" out [1:0] $end
$var reg 1 P" validOUT $end
$var reg 1 Q" validOutMux $end
$upscope $end
$scope module mux2 $end
$var wire 2 R" dataIn0 [1:0] $end
$var wire 2 S" dataIn1 [1:0] $end
$var wire 1 "" validIN0 $end
$var wire 1 #" validIN1 $end
$var wire 1 v selector $end
$var wire 1 x reset $end
$var wire 1 !" clk $end
$var reg 2 T" dataOutCond [1:0] $end
$var reg 2 U" out [1:0] $end
$var reg 1 V" validOUT $end
$var reg 1 W" validOutMux $end
$upscope $end
$upscope $end
$upscope $end
$scope module muxSynth4x1 $end
$var wire 1 q validOUT $end
$var wire 1 X" validOutMux1 $end
$var wire 1 Y" validOutMux2 $end
$var wire 1 r validIN3 $end
$var wire 1 s validIN2 $end
$var wire 1 t validIN1 $end
$var wire 1 u validIN0 $end
$var wire 1 v selector1 $end
$var wire 1 w selector0 $end
$var wire 1 x reset $end
$var wire 4 Z" dataOutMux2 [3:0] $end
$var wire 4 [" dataOutMux1 [3:0] $end
$var wire 4 \" dataOutCond [3:0] $end
$var wire 4 ]" dataIn3 [3:0] $end
$var wire 4 ^" dataIn2 [3:0] $end
$var wire 4 _" dataIn1 [3:0] $end
$var wire 4 `" dataIn0 [3:0] $end
$var wire 1 !" clk $end
$scope module mux1 $end
$var wire 1 X" validOUT $end
$var wire 1 t validIN1 $end
$var wire 1 u validIN0 $end
$var wire 1 w selector $end
$var wire 1 x reset $end
$var wire 4 a" dataOutCond [3:0] $end
$var wire 4 b" dataIn1 [3:0] $end
$var wire 4 c" dataIn0 [3:0] $end
$var wire 1 !" clk $end
$scope module mux1 $end
$var wire 2 d" dataIn0 [1:0] $end
$var wire 2 e" dataIn1 [1:0] $end
$var wire 1 t validIN1 $end
$var wire 1 u validIN0 $end
$var wire 1 w selector $end
$var wire 1 x reset $end
$var wire 1 !" clk $end
$var reg 2 f" dataOutCond [1:0] $end
$var reg 2 g" out [1:0] $end
$var reg 1 h" validOUT $end
$var reg 1 i" validOutMux $end
$upscope $end
$scope module mux2 $end
$var wire 2 j" dataIn0 [1:0] $end
$var wire 2 k" dataIn1 [1:0] $end
$var wire 1 t validIN1 $end
$var wire 1 u validIN0 $end
$var wire 1 w selector $end
$var wire 1 x reset $end
$var wire 1 !" clk $end
$var reg 2 l" dataOutCond [1:0] $end
$var reg 2 m" out [1:0] $end
$var reg 1 n" validOUT $end
$var reg 1 o" validOutMux $end
$upscope $end
$upscope $end
$scope module mux2 $end
$var wire 1 Y" validOUT $end
$var wire 1 r validIN1 $end
$var wire 1 s validIN0 $end
$var wire 1 w selector $end
$var wire 1 x reset $end
$var wire 4 p" dataOutCond [3:0] $end
$var wire 4 q" dataIn1 [3:0] $end
$var wire 4 r" dataIn0 [3:0] $end
$var wire 1 !" clk $end
$scope module mux1 $end
$var wire 2 s" dataIn0 [1:0] $end
$var wire 2 t" dataIn1 [1:0] $end
$var wire 1 r validIN1 $end
$var wire 1 s validIN0 $end
$var wire 1 w selector $end
$var wire 1 x reset $end
$var wire 1 !" clk $end
$var reg 2 u" dataOutCond [1:0] $end
$var reg 2 v" out [1:0] $end
$var reg 1 w" validOUT $end
$var reg 1 x" validOutMux $end
$upscope $end
$scope module mux2 $end
$var wire 2 y" dataIn0 [1:0] $end
$var wire 2 z" dataIn1 [1:0] $end
$var wire 1 r validIN1 $end
$var wire 1 s validIN0 $end
$var wire 1 w selector $end
$var wire 1 x reset $end
$var wire 1 !" clk $end
$var reg 2 {" dataOutCond [1:0] $end
$var reg 2 |" out [1:0] $end
$var reg 1 }" validOUT $end
$var reg 1 ~" validOutMux $end
$upscope $end
$upscope $end
$scope module mux3 $end
$var wire 4 !# dataIn0 [3:0] $end
$var wire 4 "# dataIn1 [3:0] $end
$var wire 1 X" validIN0 $end
$var wire 1 Y" validIN1 $end
$var wire 1 q validOUT $end
$var wire 1 v selector $end
$var wire 1 x reset $end
$var wire 4 ## dataOutCond [3:0] $end
$var wire 1 !" clk $end
$scope module mux1 $end
$var wire 2 $# dataIn0 [1:0] $end
$var wire 2 %# dataIn1 [1:0] $end
$var wire 1 X" validIN0 $end
$var wire 1 Y" validIN1 $end
$var wire 1 v selector $end
$var wire 1 x reset $end
$var wire 1 !" clk $end
$var reg 2 &# dataOutCond [1:0] $end
$var reg 2 '# out [1:0] $end
$var reg 1 (# validOUT $end
$var reg 1 )# validOutMux $end
$upscope $end
$scope module mux2 $end
$var wire 2 *# dataIn0 [1:0] $end
$var wire 2 +# dataIn1 [1:0] $end
$var wire 1 X" validIN0 $end
$var wire 1 Y" validIN1 $end
$var wire 1 v selector $end
$var wire 1 x reset $end
$var wire 1 !" clk $end
$var reg 2 ,# dataOutCond [1:0] $end
$var reg 2 -# out [1:0] $end
$var reg 1 .# validOUT $end
$var reg 1 /# validOutMux $end
$upscope $end
$upscope $end
$upscope $end
$scope module prob $end
$var wire 4 0# dataOutCond [3:0] $end
$var wire 4 1# dataOutSynth [3:0] $end
$var wire 1 q validOUT $end
$var reg 1 !" clk $end
$var reg 4 2# dataIn0 [3:0] $end
$var reg 4 3# dataIn1 [3:0] $end
$var reg 4 4# dataIn2 [3:0] $end
$var reg 4 5# dataIn3 [3:0] $end
$var reg 1 x reset $end
$var reg 1 w selector0 $end
$var reg 1 v selector1 $end
$var reg 1 u validIN0 $end
$var reg 1 t validIN1 $end
$var reg 1 s validIN2 $end
$var reg 1 r validIN3 $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 5#
b0 4#
b0 3#
b0 2#
bx 1#
bx 0#
x/#
x.#
bx -#
bx ,#
bx +#
bx *#
x)#
x(#
bx '#
bx &#
bx %#
bx $#
bx ##
bx "#
bx !#
0~"
x}"
b0 |"
bx {"
b0 z"
b0 y"
0x"
xw"
b0 v"
bx u"
b0 t"
b0 s"
b0 r"
b0 q"
bx p"
0o"
xn"
b0 m"
bx l"
b0 k"
b0 j"
0i"
xh"
b0 g"
bx f"
b0 e"
b0 d"
b0 c"
b0 b"
bx a"
b0 `"
b0 _"
b0 ^"
b0 ]"
bx \"
bx ["
bx Z"
xY"
xX"
xW"
xV"
bx U"
bx T"
bx S"
bx R"
xQ"
xP"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
0H"
xG"
b0 F"
bx E"
b0 D"
b0 C"
0B"
xA"
b0 @"
bx ?"
b0 >"
b0 ="
b0 <"
b0 ;"
bx :"
09"
x8"
b0 7"
bx 6"
b0 5"
b0 4"
03"
x2"
b0 1"
bx 0"
b0 /"
b0 ."
b0 -"
b0 ,"
bx +"
b0 *"
b0 )"
b0 ("
b0 '"
bx &"
bx %"
bx $"
x#"
x""
0!"
b0 ~
b0 }
b0 |
b0 {
bx z
bx y
0x
0w
0v
0u
0t
0s
1r
xq
xp
xo
xn
xm
bx l
xk
xj
xi
zh
zg
zf
ze
xd
xc
xb
xa
z`
z_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
bx K
xJ
zI
zH
zG
zF
bz E
bz D
zC
xB
zA
z@
z?
z>
x=
x<
x;
bx :
bx 9
bz 8
bz 7
x6
x5
bx 4
bx 3
bz 2
bz 1
bx 0
x/
z.
z-
z,
z+
bz *
bz )
z(
x'
z&
z%
z$
z#
z"
z!
$end
#5
b0 O"
b0 U"
b0 '#
b0 -#
b10 |"
b1 v"
b10 F"
b1 @"
b11 m"
b1 g"
b11 7"
b1 1"
b0 L"
b0 R"
b0 M"
b0 S"
b0 $#
b0 *#
b0 %#
b0 +#
b10 z"
b10 t"
b10 D"
b10 >"
b10 y"
b1 s"
b10 C"
b1 ="
b10 k"
b11 e"
b10 5"
b11 /"
b11 j"
b1 d"
b11 4"
b1 ."
b0 0"
b0 %"
b0 +"
b0 I"
b0 6"
b0 ?"
b0 $"
b0 :"
b0 J"
b0 E"
b0 N"
b0 z
b0 &"
b0 K"
b0 0#
b0 T"
b0 f"
b0 ["
b0 a"
b0 !#
b0 l"
b0 u"
b0 Z"
b0 p"
b0 "#
b0 {"
b0 &#
b0 y
b0 \"
b0 ##
b0 1#
b0 ,#
b1010 {
b1010 '"
b1010 ;"
b1010 ]"
b1010 q"
b1010 5#
b1001 |
b1001 ("
b1001 <"
b1001 ^"
b1001 r"
b1001 4#
b1011 }
b1011 )"
b1011 ,"
b1011 _"
b1011 b"
b1011 3#
b1101 ~
b1101 *"
b1101 -"
b1101 `"
b1101 c"
b1101 2#
1x
1B"
1H"
1x"
1~"
13"
19"
1i"
1o"
1s
1t
1u
1!"
#10
0!"
#15
b11 -#
b11 U"
b11 1"
b10 7"
b10 @"
b11 g"
b10 m"
b10 v"
b10 +#
b1 %#
b11 *#
1)#
b1 '#
1/#
b1 $#
b10 S"
b1 M"
b11 R"
1Q"
b1 O"
1W"
b1 L"
1w
1Y"
1}"
b10 {"
1w"
b1001 Z"
b1001 p"
b1001 "#
b1 u"
1X"
1n"
b11 l"
1h"
b1101 ["
b1101 a"
b1101 !#
b1 f"
1#"
1G"
b10 E"
1A"
b1001 $"
b1001 :"
b1001 J"
b1 ?"
1""
18"
b11 6"
12"
b1101 %"
b1101 +"
b1101 I"
b1 0"
1!"
#20
0!"
#25
b10 O"
b10 '#
b11 L"
b10 R"
b10 M"
b11 $#
b10 *#
b10 %#
b10 U"
b10 -#
b1 1"
b11 7"
b1 @"
b1 g"
b11 m"
b1 v"
b11 0"
b1011 %"
b1011 +"
b1011 I"
b10 6"
b1010 $"
b1010 :"
b1010 J"
b10 ?"
1q
1P"
b1 N"
1V"
b1101 z
b1101 &"
b1101 K"
b1101 0#
b11 T"
b11 f"
b1011 ["
b1011 a"
b1011 !#
b10 l"
b1010 Z"
b1010 p"
b1010 "#
b10 u"
1(#
b1 &#
1.#
b1101 y
b1101 \"
b1101 ##
b1101 1#
b11 ,#
1v
0w
1!"
#30
0!"
#35
b1 O"
b11 U"
b1 '#
b11 -#
b1 %#
b11 *#
b1 $#
b1 M"
b11 R"
b1 L"
0v
b10 ,#
b1010 y
b1010 \"
b1010 ##
b1010 1#
b10 &#
b1001 Z"
b1001 p"
b1001 "#
b1 u"
b11 l"
b1101 ["
b1101 a"
b1101 !#
b1 f"
b10 T"
b1010 z
b1010 &"
b1010 K"
b1010 0#
b10 N"
b1001 $"
b1001 :"
b1001 J"
b1 ?"
b11 6"
b1101 %"
b1101 +"
b1101 I"
b1 0"
0B"
0H"
0x"
0~"
03"
09"
0i"
0o"
0r
0s
0t
0u
1!"
#40
0!"
#45
0Q"
0W"
b10 U"
0)#
0/#
b10 -#
b11 1"
b10 7"
b10 @"
b11 g"
b10 m"
b10 v"
02"
0""
08"
0A"
0#"
0G"
b1 N"
b1101 z
b1101 &"
b1101 K"
b1101 0#
b11 T"
0h"
0X"
0n"
0w"
0Y"
0}"
b1 &#
b1101 y
b1101 \"
b1101 ##
b1101 1#
b11 ,#
1v
1w
1B"
1H"
1x"
1~"
13"
19"
1i"
1o"
1r
1s
1t
1u
1!"
#50
0!"
#55
b10 %#
b10 *#
1)#
b11 '#
1/#
b10 -#
b11 $#
b10 M"
b10 R"
1Q"
b11 O"
1W"
b10 U"
b11 L"
0v
0.#
0(#
1}"
1Y"
1w"
b1010 Z"
b1010 p"
b1010 "#
b10 u"
1n"
b10 l"
1X"
1h"
b1011 ["
b1011 a"
b1011 !#
b11 f"
0V"
0q
0P"
1G"
1#"
1A"
b1010 $"
b1010 :"
b1010 J"
b10 ?"
18"
b10 6"
1""
12"
b1011 %"
b1011 +"
b1011 I"
b11 0"
0B"
0H"
0x"
0~"
03"
09"
0i"
0o"
0r
0s
0t
0u
1!"
#60
0!"
#65
0Q"
0W"
0)#
0/#
b1 1"
b11 7"
b1 @"
b1 g"
b11 m"
b1 v"
02"
0""
08"
0A"
0#"
0G"
1P"
b11 N"
1V"
b1011 z
b1011 &"
b1011 K"
b1011 0#
b10 T"
0h"
0X"
0n"
0w"
0Y"
0}"
1(#
b11 &#
1q
1.#
b1011 y
b1011 \"
b1011 ##
b1011 1#
b10 ,#
0w
1!"
#70
0!"
#75
b10 O"
b10 '#
b11 1"
b10 7"
b10 @"
b11 g"
b10 m"
b10 v"
1v
1w
0.#
0(#
0V"
0q
0P"
1!"
